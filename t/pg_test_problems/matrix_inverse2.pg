##DESCRIPTION



##ENDDESCRIPTION


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",         # used to display problem source button
   "PGcourse.pl",      # Customization file for the course
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

##############################################################
#
#  Text
#
#

Context("Matrix");
Context()->constants->add(
  A => Matrix([[1,2,3],[4,5,6]]),
  B => Matrix([0,0],[0,0]),
);
Context()->variables->add(
  M => Matrix([[1,2,3],[4,5,6]]),
  N => Matrix([[1,2],[3,4]]),
);

#Formula("A^(-1)");
#Formula("M^(-1)");
#Formula("[[1,2,3],[4,5,x]]^(-1)");
#Formula("[[1,2,3],[4,5,6]]^(-1)");

#Formula("B^(-1)")->eval;
#Formula("N^(-1)")->eval(N => Matrix([[0,0],[0,0]]));
#Formula("[[0,0],[0,0]]^(-1)");
#Formula("[[x,0],[0,x]]^(-1)")->eval(x => 0);
#Matrix([[0,0],[0,0]]) ** -1;

Matrix([[0,0],[0,0]])->inverse;
Matrix([[0,0],[0,0]])->solve_LR(Vector(1,1));


BEGIN_PGML
Without the patch, the first four should produce errors 
about 2x3 and 2x3 matrixes not being able to be multiplied, 
while the next five and final two should produce errors 
about matrices needing at least one entry.

With the patch, the first four should produce messages 
that only a square matrix can be inverted, the next 
five should say that the matrix is not invertible, 
and the last two should produce an undefined value 
and a list of three undefined values, respectively.


END_PGML
#

##############################################################
#
#  Answers
#
#



ENDDOCUMENT();        # This should be the last executable line in the problem.